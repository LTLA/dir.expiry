% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lockDirectory.R
\name{lockDirectory}
\alias{lockDirectory}
\alias{unlockDirectory}
\title{Lock and unlock directories}
\usage{
lockDirectory(path, ...)

unlockDirectory(handle)
}
\arguments{
\item{path}{String containing the path to a versioned directory.
The \code{dirname} should be the package cache while the \code{basename} should be a version number.}

\item{...}{Further arguments to pass to \code{\link{lock}}.}

\item{handle}{The lock handle generated by \code{\link{lockDirectory}}.}
}
\value{
\code{lockDirectory} returns a pair of lock handles, generated by the \pkg{filelock} package.

\code{unlockDirectory} unlocks the two handles generated by \code{lockDirectory}.
}
\description{
Mark directories as locked or unlocked for thread-safe processing,
using a standard naming scheme for the lock files.
}
\details{
\code{lockDirectory} actually creates two locks.
The first represents a lock on the versioned directory (i.e., \code{basename(path)}) within the package cache (i.e., \code{dirname(path)}) and provides thread-safe read/write on its contents.
Concurrent read operations are also permitted by setting \code{exclusive=FALSE} in \code{...} to define a shared lock..

The second lock is applied to the package cache and is always a shared lock, regardless of the contents of \code{...}.
This provides thread-safe access to the lock file used in the first lock,
protecting it from deletion when the relevant directory expires in \code{\link{clearDirectories}}.
}
\examples{
# Creating the relevant directories.
cache.dir <- tempfile(pattern="expired_demo")
dir.create(cache.dir)
version <- package_version("1.11.0")

handle <- lockDirectory(file.path(cache.dir, version))
handle
unlockDirectory(handle)

list.files(cache.dir)

}
\author{
Aaron Lun
}
